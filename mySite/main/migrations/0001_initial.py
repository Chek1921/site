# Generated by Django 4.1.5 on 2023-03-20 03:45

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.CharField(max_length=100, unique=True, verbose_name='Адрес')),
                ('allows', models.CharField(default='1', max_length=1, verbose_name='Разрешение')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Почта')),
                ('want_staff', models.BooleanField(default=False, verbose_name='Хочет быть админом')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Bill_name',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('unit', models.CharField(max_length=100, verbose_name='Единица измерения')),
                ('default_rate', models.SmallIntegerField(verbose_name='Стандартное значение при создании счетичка')),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.CharField(max_length=100, unique=True, verbose_name='Район')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=100, verbose_name='Адрес')),
                ('district', models.CharField(max_length=100, verbose_name='Район')),
                ('name', models.CharField(max_length=100, verbose_name='Район')),
                ('rate_name', models.CharField(max_length=100, verbose_name='Название тарифа')),
                ('rate_cost', models.FloatField(verbose_name='Стоимость тарифа ')),
                ('current_count', models.FloatField(verbose_name='Нынешнее значение счетчика')),
                ('cost', models.FloatField(verbose_name='Для оплаты')),
                ('time_create', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('text', models.TextField(verbose_name='Содержание')),
                ('address', models.CharField(max_length=100, verbose_name='Адрес')),
                ('vision', models.CharField(default='1', max_length=2, verbose_name='Видна ли она админу')),
                ('a_title', models.CharField(blank=True, max_length=200, verbose_name='Название ответа')),
                ('a_text', models.TextField(blank=True, verbose_name='Содержание ответа')),
                ('photo', models.ImageField(blank=True, upload_to='photos/%Y/%m/%d/')),
                ('time_create', models.DateTimeField(auto_now_add=True)),
                ('district', models.ForeignKey(default='1', on_delete=django.db.models.deletion.CASCADE, to='main.district')),
            ],
        ),
        migrations.CreateModel(
            name='New',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('text', models.TextField(verbose_name='Содержание')),
                ('time_create', models.DateTimeField(auto_now_add=True)),
                ('district', models.ForeignKey(default='1', on_delete=django.db.models.deletion.CASCADE, to='main.district')),
            ],
        ),
        migrations.CreateModel(
            name='ChangeDistict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district', models.ForeignKey(default='1', on_delete=django.db.models.deletion.CASCADE, to='main.district')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Bill_rate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название тарифа')),
                ('cost', models.FloatField(verbose_name='Тариф')),
                ('bill_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.bill_name')),
                ('district', models.ForeignKey(default='1', on_delete=django.db.models.deletion.CASCADE, to='main.district')),
            ],
        ),
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_count', models.FloatField(verbose_name='Последнее оплаченное значение счетчика')),
                ('current_count', models.FloatField(verbose_name='Нынешнее значение счетчика')),
                ('address', models.CharField(max_length=100, verbose_name='Адрес')),
                ('cost', models.FloatField(verbose_name='Для оплаты')),
                ('time_pay', models.DateTimeField(blank=True, null=True)),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.bill_name')),
                ('rate', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.bill_rate')),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='district',
            field=models.ForeignKey(default='1', on_delete=django.db.models.deletion.CASCADE, to='main.district'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
